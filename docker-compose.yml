version: '3.8'

services:
  # Main application service
  insights-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: observer-coordinator-insights:latest
    container_name: insights-app
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data:ro
      - ./output:/app/output:rw
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
    ports:
      - "8080:8080"  # Metrics/monitoring port
    networks:
      - insights-network
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Development service
  insights-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: observer-coordinator-insights:dev
    container_name: insights-dev
    environment:
      - APP_ENV=development
      - DEBUG=true
      - PYTHONPATH=/app/src
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app:cached
      - /app/.pytest_cache
      - /app/.mypy_cache
      - /app/.ruff_cache
    ports:
      - "8000:8000"  # Development server
      - "8080:8080"  # Metrics port
    networks:
      - insights-network
    depends_on:
      - redis
      - postgres
    profiles:
      - dev
    command: ["python", "-m", "src.main", "--dev"]

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: insights-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - insights-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: insights-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=insights
      - POSTGRES_USER=insights
      - POSTGRES_PASSWORD=insights_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - insights-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U insights -d insights"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: insights-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - insights-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: insights-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - insights-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Testing service
  insights-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: observer-coordinator-insights:test
    container_name: insights-test
    environment:
      - APP_ENV=test
      - PYTHONPATH=/app/src
      - TEST_DATABASE_URL=postgresql://insights:insights_password@postgres:5432/insights_test
    volumes:
      - .:/app:cached
      - test-reports:/app/test-reports
    networks:
      - insights-network
    depends_on:
      - postgres
      - redis
    profiles:
      - test
    command: ["python", "-m", "pytest", "tests/", "-v", "--cov=src", "--cov-report=html", "--cov-report=term"]

networks:
  insights-network:
    driver: bridge
    name: insights-network

volumes:
  postgres-data:
    name: insights-postgres-data
  redis-data:
    name: insights-redis-data
  prometheus-data:
    name: insights-prometheus-data
  grafana-data:
    name: insights-grafana-data
  test-reports:
    name: insights-test-reports