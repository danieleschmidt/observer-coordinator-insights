version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_ENV: development
    image: observer-coordinator-insights:latest
    container_name: insights-app
    restart: unless-stopped
    ports:
      - "8000:8000"  # Application port
      - "8080:8080"  # Health check port
      - "9090:9090"  # Metrics port
    environment:
      - APP_ENV=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data:ro  # Read-only data mount
      - ./output:/app/output  # Output directory
      - ./logs:/app/logs  # Logs directory
      - ./cache:/app/cache  # Cache directory
    networks:
      - insights-network
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development service with additional tools
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_ENV: development
    image: observer-coordinator-insights:dev
    container_name: insights-app-dev
    ports:
      - "8001:8000"  # Application port
      - "8081:8080"  # Health check port
      - "9091:9090"  # Metrics port
      - "8888:8888"  # Jupyter port
    environment:
      - APP_ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - .:/app  # Full source code mount for development
      - jupyter-data:/home/insights/.jupyter
    networks:
      - insights-network
    profiles:
      - dev
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: insights-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - insights-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: insights-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - insights-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: insights-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - insights-network
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: insights-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - insights-network
    depends_on:
      - app
    profiles:
      - production

  # Load testing service
  locust:
    image: locustio/locust
    container_name: insights-locust
    ports:
      - "8089:8089"
    volumes:
      - ./tests/performance:/mnt/locust
    networks:
      - insights-network
    profiles:
      - testing
    command: -f /mnt/locust/locustfile.py --host=http://app:8000

  # Database service (for future use)
  postgres:
    image: postgres:15-alpine
    container_name: insights-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=insights
      - POSTGRES_USER=insights
      - POSTGRES_PASSWORD=insights_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - insights-network
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U insights"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for object storage (for future use)
  minio:
    image: minio/minio
    container_name: insights-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio-data:/data
    networks:
      - insights-network
    profiles:
      - storage
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  insights-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
  jupyter-data:
    driver: local