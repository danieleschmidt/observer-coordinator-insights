[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "observer-coordinator-insights"
version = "0.1.0"
description = "Multi-agent orchestration for organizational analytics from Insights Discovery data"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Terragon Labs", email = "contact@terragon-labs.com" }
]
maintainers = [
    { name = "Terragon Labs", email = "contact@terragon-labs.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Human Resources",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "insights-discovery",
    "clustering",
    "team-composition",
    "organizational-analytics",
    "multi-agent",
    "orchestration",
    "hr-analytics",
    "personality-profiling"
]
requires-python = ">=3.9"
dependencies = [
    "PyYAML>=6.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "rich>=13.0.0",
    "httpx>=0.24.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.0.291",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
    "black>=23.7.0",
    "isort>=5.12.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]
testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "faker>=19.3.0",
    "locust>=2.16.0",
]

[project.urls]
Homepage = "https://github.com/terragon-labs/observer-coordinator-insights"
Repository = "https://github.com/terragon-labs/observer-coordinator-insights.git"
Documentation = "https://github.com/terragon-labs/observer-coordinator-insights#readme"
"Bug Tracker" = "https://github.com/terragon-labs/observer-coordinator-insights/issues"

[project.scripts]
insights-clustering = "src.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json"]

# Ruff configuration (linting and formatting)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "ICN",  # flake8-import-conventions
    "S",    # flake8-bandit (security)
    "N",    # pep8-naming
    "D",    # pydocstyle
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "PLR0913",  # Too many arguments to function call
    "S101",  # Use of assert detected (allow in tests)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
    "htmlcov",
    ".pytest_cache",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "D", "ARG"]  # Allow assert and ignore docstring requirements in tests
"*/__init__.py" = ["D104"]  # Ignore missing docstring in __init__.py

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["src", "tests"]
force-single-line = false
lines-after-imports = 2

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "asyncio: marks tests as async tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101"]  # Skip assert_used test

# Black formatter configuration (fallback)
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration (fallback)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "tests"]