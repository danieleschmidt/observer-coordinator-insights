# Security Scanning Pipeline for Observer Coordinator Insights
name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.github/workflows/security-scan.yml'
  
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'requirements.txt'
      - 'Dockerfile'
  
  # Manual trigger for security scans
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        type: choice
        options:
          - all
          - code
          - dependencies
          - container
          - infrastructure
        default: 'all'
      severity_threshold:
        description: 'Minimum severity level to report'
        required: true
        type: choice
        options:
          - CRITICAL
          - HIGH
          - MEDIUM
          - LOW
        default: 'HIGH'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Security Scanning
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: contains(fromJson('["all", "code"]'), github.event.inputs.scan_type) || github.event.inputs.scan_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      # Bandit Security Linting
      - name: Install security tools
        run: |
          pip install bandit[toml] safety semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json -ll
          bandit -r src/ -f txt || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json
          retention-days: 30

      # Semgrep Static Analysis
      - name: Run Semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true
          semgrep --config=auto --sarif --output=semgrep-results.sarif src/ || true

      - name: Upload Semgrep SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep

      - name: Upload Semgrep artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: |
            semgrep-report.json
            semgrep-results.sarif
          retention-days: 30

      # Secret Detection
      - name: Run secret detection
        run: |
          # Install truffleHog for secret detection
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan for secrets
          trufflehog git file://. --json --no-update > secrets-report.json || true

      - name: Upload secret detection results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-scan-results
          path: secrets-report.json
          retention-days: 30

  # Dependency Security Scanning
  dependency-security:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    if: contains(fromJson('["all", "dependencies"]'), github.event.inputs.scan_type) || github.event.inputs.scan_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Safety - Python dependency vulnerability scanner
      - name: Install Safety
        run: |
          pip install safety

      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report || true

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-results
          path: safety-report.json
          retention-days: 30

      # Snyk vulnerability scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json-file-output=snyk-report.json --severity-threshold=${{ github.event.inputs.severity_threshold || 'high' }}

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk-report.json
          retention-days: 30

      # OSSF Scorecard
      - name: Run OSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: ossf-scorecard-report.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload OSSF Scorecard results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ossf-scorecard-report.sarif

      # License compliance check
      - name: Check license compliance
        run: |
          pip install pip-licenses
          pip-licenses --format=json --output-file=licenses-report.json
          pip-licenses --fail-on="GPL"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: licenses-report.json
          retention-days: 30

  # Container Security Scanning
  container-security:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    if: contains(fromJson('["all", "container"]'), github.event.inputs.scan_type) || github.event.inputs.scan_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build container for scanning
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Trivy container scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:security-scan
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'
          category: 'trivy-container'

      # Grype container scanning
      - name: Run Grype vulnerability scanner
        run: |
          # Install Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan the container image
          grype ${{ env.IMAGE_NAME }}:security-scan -o json > grype-container-report.json
          grype ${{ env.IMAGE_NAME }}:security-scan -o sarif > grype-container-results.sarif

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'grype-container-results.sarif'
          category: 'grype-container'

      - name: Upload Grype artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: grype-container-results
          path: grype-container-report.json
          retention-days: 30

      # Container configuration security
      - name: Run Docker Bench Security
        run: |
          # Run Docker Bench Security
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v /etc:/etc:ro -v /usr:/usr:ro \
            docker/docker-bench-security > docker-bench-report.txt || true

      - name: Upload Docker Bench results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-bench-results
          path: docker-bench-report.txt
          retention-days: 30

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Analysis
    runs-on: ubuntu-latest
    if: contains(fromJson('["all", "infrastructure"]'), github.event.inputs.scan_type) || github.event.inputs.scan_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Terraform security scanning
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/
          format: sarif
          sarif_file: tfsec-results.sarif

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif
          category: 'tfsec'

      # Checkov infrastructure scanning
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform
          output_format: json
          output_file_path: checkov-report.json

      - name: Upload Checkov results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-results
          path: checkov-report.json
          retention-days: 30

      # Kubernetes security scanning
      - name: Run kubesec
        run: |
          # Install kubesec
          curl -sSfL https://github.com/controlplaneio/kubesec/releases/download/v2.13.0/kubesec_linux_amd64.tar.gz | tar -xz
          sudo mv kubesec /usr/local/bin/
          
          # Scan Kubernetes manifests
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs -I {} kubesec scan {} > kubesec-report.json || true

      - name: Upload kubesec results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kubesec-results
          path: kubesec-report.json
          retention-days: 30

  # Security Report Generation
  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security, container-security, infrastructure-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Install report dependencies
        run: |
          pip install jinja2 pyyaml

      - name: Generate comprehensive security report
        run: |
          python scripts/generate-security-report.py \
            --input-dir security-reports/ \
            --output-dir security-report/ \
            --format html \
            --format json \
            --format pdf

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report/
          retention-days: 90

      # Security dashboard update
      - name: Update security dashboard
        if: github.ref == 'refs/heads/main'
        run: |
          python scripts/update-security-dashboard.py \
            --report-dir security-report/ \
            --dashboard-url ${{ secrets.SECURITY_DASHBOARD_URL }}

  # Security Policy Validation
  validate-security-policies:
    name: Validate Security Policies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate security policies
        run: |
          # Check that all security policies are in place
          python scripts/validate-security-policies.py

      - name: Check compliance requirements
        run: |
          # Validate GDPR, CCPA, PDPA compliance configurations
          python scripts/check-compliance.py --standards gdpr,ccpa,pdpa

      - name: Audit access controls
        run: |
          # Audit RBAC and access control configurations
          python scripts/audit-access-controls.py

  # Notification and Alerting
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [generate-security-report, validate-security-policies]
    if: always()
    steps:
      - name: Check for critical vulnerabilities
        id: check-critical
        run: |
          # Check if any critical vulnerabilities were found
          if [ -f "security-report/summary.json" ]; then
            CRITICAL_COUNT=$(jq '.critical_count // 0' security-report/summary.json)
            HIGH_COUNT=$(jq '.high_count // 0' security-report/summary.json)
            echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "has-critical=true" >> $GITHUB_OUTPUT
            else
              echo "has-critical=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Notify security team for critical issues
        if: steps.check-critical.outputs.has-critical == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚨 CRITICAL SECURITY ALERT 🚨",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Critical Vulnerabilities Found",
                      "value": "${{ steps.check-critical.outputs.critical-count }}",
                      "short": true
                    },
                    {
                      "title": "High Vulnerabilities Found",
                      "value": "${{ steps.check-critical.outputs.high-count }}",
                      "short": true
                    },
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Report",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}

      - name: Email security team
        if: steps.check-critical.outputs.has-critical == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 CRITICAL SECURITY VULNERABILITIES FOUND - ${{ github.repository }}"
          body: |
            Critical security vulnerabilities have been detected in the Observer Coordinator Insights repository.
            
            Summary:
            - Critical vulnerabilities: ${{ steps.check-critical.outputs.critical-count }}
            - High vulnerabilities: ${{ steps.check-critical.outputs.high-count }}
            - Repository: ${{ github.repository }}
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}
            
            Please review the security report immediately and take appropriate action.
            
            View detailed report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            This is an automated security alert from the CI/CD pipeline.
          to: ${{ secrets.SECURITY_TEAM_EMAIL }}
          from: security-alerts@observer-coordinator-insights.com

      - name: Create security issue
        if: steps.check-critical.outputs.has-critical == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Vulnerabilities Found - ${context.sha.substring(0, 7)}`,
              body: `Critical security vulnerabilities have been detected in commit ${context.sha}.

            **Summary:**
            - Critical vulnerabilities: ${{ steps.check-critical.outputs.critical-count }}
            - High vulnerabilities: ${{ steps.check-critical.outputs.high-count }}
            
            **Action Required:**
            - [ ] Review security report
            - [ ] Address critical vulnerabilities
            - [ ] Update dependencies if needed
            - [ ] Re-run security scan
            
            **Report:** [View security scan results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            This issue was automatically created by the security scanning pipeline.`,
              labels: ['security', 'critical', 'vulnerability'],
              assignees: JSON.parse('${{ toJson(secrets.SECURITY_TEAM_GITHUB_USERS) }}' || '[]')
            });

  # Security Quality Gates
  security-quality-gates:
    name: Security Quality Gates
    runs-on: ubuntu-latest
    needs: [generate-security-report]
    if: github.event_name == 'pull_request'
    steps:
      - name: Download security report
        uses: actions/download-artifact@v4
        with:
          name: comprehensive-security-report
          path: security-report/

      - name: Evaluate security quality gates
        id: quality-gates
        run: |
          # Check security quality gates
          python scripts/security-quality-gates.py \
            --report security-report/summary.json \
            --max-critical 0 \
            --max-high 5 \
            --max-medium 20

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read security summary
            let summary = '';
            try {
              const reportData = JSON.parse(fs.readFileSync('security-report/summary.json', 'utf8'));
              summary = `
            ## 🔒 Security Scan Results
            
            | Severity | Count |
            |----------|-------|
            | Critical | ${reportData.critical_count || 0} |
            | High     | ${reportData.high_count || 0} |
            | Medium   | ${reportData.medium_count || 0} |
            | Low      | ${reportData.low_count || 0} |
            
            **Status:** ${reportData.critical_count > 0 ? '❌ Critical issues found' : reportData.high_count > 5 ? '⚠️ Too many high-severity issues' : '✅ Security scan passed'}
            `;
            } catch (error) {
              summary = '❌ Unable to read security report';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Fail if security gates not met
        if: steps.quality-gates.outputs.passed != 'true'
        run: |
          echo "Security quality gates failed. Review the security report and address issues before merging."
          exit 1