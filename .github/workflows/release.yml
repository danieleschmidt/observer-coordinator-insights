# Release Management Pipeline for Observer Coordinator Insights
name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags
  
  # Manual release trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v4.1.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Validate release conditions
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
          else
            VERSION="${{ github.ref_name }}"
            # Check if it's a pre-release (alpha, beta, rc)
            if [[ "$VERSION" =~ -(alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION, Pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Error: Invalid version format. Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^$VERSION$"; then
            echo "Error: Tag $VERSION already exists"
            exit 1
          fi

      - name: Validate branch for release
        run: |
          # Only allow releases from main or release/* branches
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "$BRANCH_NAME" != "main" && ! "$BRANCH_NAME" =~ ^release/ ]]; then
            echo "Error: Releases can only be created from main or release/* branches"
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --reverse)
          fi
          
          # Save changelog to file and output
          echo "$CHANGELOG" > CHANGELOG.tmp
          
          # Use custom release notes if provided
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "${{ github.event.inputs.release_notes }}" > CHANGELOG.tmp
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.tmp >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Pre-release quality gates
  quality-gates:
    name: Release Quality Gates
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run comprehensive tests
        run: |
          # Run all tests with coverage
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
          
          # Ensure minimum coverage threshold (90%)
          coverage report --fail-under=90

      - name: Run security scan
        run: |
          pip install bandit safety
          bandit -r src/ -f json -o bandit-report.json
          safety check --json --output safety-report.json || true

      - name: Validate documentation
        run: |
          # Check that all documentation is up to date
          python scripts/validate-docs.py

      - name: Check API compatibility
        run: |
          # Validate API backward compatibility
          python scripts/api-compatibility-check.py

      - name: Performance benchmark
        run: |
          # Run performance tests to ensure no regressions
          pytest tests/benchmarks/ --benchmark-only --benchmark-json=benchmark-results.json

  # Build release artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, quality-gates]
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build Python package
        run: |
          python -m build

      - name: Create platform-specific distribution
        run: |
          # Create a distribution archive with all necessary files
          mkdir -p dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}
          
          # Copy application files
          cp -r src/ dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/
          cp -r docs/ dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/
          cp requirements.txt dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/
          cp README.md dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/
          cp LICENSE dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/
          
          # Create installation scripts
          cat > dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/install.sh << 'EOF'
          #!/bin/bash
          echo "Installing Observer Coordinator Insights..."
          pip install -r requirements.txt
          echo "Installation complete!"
          EOF
          
          chmod +x dist/observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/install.sh
          
          # Create archive
          cd dist/
          tar -czf observer-coordinator-insights-${{ needs.validate-release.outputs.version }}-${{ matrix.platform }}.tar.gz \
            observer-coordinator-insights-${{ needs.validate-release.outputs.version }}/

      - name: Upload platform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.platform }}
          path: |
            dist/*.whl
            dist/*.tar.gz
          retention-days: 30

  # Build and tag container images
  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [validate-release, quality-gates]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}

      - name: Build and push container images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Sign container images
        run: |
          # Sign the container images with cosign
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          rm cosign.key

  # Generate release documentation
  generate-docs:
    name: Generate Release Documentation
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

      - name: Build documentation
        run: |
          # Generate API documentation
          python scripts/generate-api-docs.py
          
          # Build static documentation site
          mkdocs build
          
          # Create documentation archive
          tar -czf docs-${{ needs.validate-release.outputs.version }}.tar.gz site/

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: release-documentation
          path: docs-${{ needs.validate-release.outputs.version }}.tar.gz
          retention-days: 30

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-containers, generate-docs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets/
          
          # Move all artifacts to release assets directory
          find release-artifacts/ -type f \( -name "*.tar.gz" -o -name "*.whl" \) -exec mv {} release-assets/ \;
          
          # Create checksums
          cd release-assets/
          sha256sum * > checksums.txt
          cd ..

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: Observer Coordinator Insights ${{ needs.validate-release.outputs.version }}
          body: |
            # Observer Coordinator Insights ${{ needs.validate-release.outputs.version }}
            
            ## What's Changed
            ${{ needs.validate-release.outputs.changelog }}
            
            ## Container Images
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
            ```
            
            ## Installation
            
            ### From Source
            ```bash
            wget https://github.com/${{ github.repository }}/archive/${{ needs.validate-release.outputs.version }}.tar.gz
            tar -xzf ${{ needs.validate-release.outputs.version }}.tar.gz
            cd observer-coordinator-insights-*
            pip install -r requirements.txt
            ```
            
            ### Using Docker
            ```bash
            docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
            ```
            
            ## Documentation
            - [User Guide](https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/docs/user-guide/README.md)
            - [API Documentation](https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/docs/user-guide/api-usage.md)
            - [Deployment Guide](https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/docs/deployment/README.md)
            
            ## Checksums
            Download and verify the integrity of the release assets:
            ```bash
            sha256sum -c checksums.txt
            ```
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v4.0.0...${{ needs.validate-release.outputs.version }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

      - name: Upload release assets
        run: |
          # Upload all release assets
          for file in release-assets/*; do
            echo "Uploading $file..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "${{ steps.create-release.outputs.upload_url }}=$(basename $file)"
          done

  # Deploy release to production
  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger production deployment
        run: |
          # Trigger the production deployment workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/cd.yml/dispatches \
            -d '{"ref":"main","inputs":{"environment":"production","version":"${{ needs.validate-release.outputs.version }}"}}'

  # Update package registries
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install publishing dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Python package
        run: |
          python -m build

      - name: Publish to PyPI
        if: needs.validate-release.outputs.is-prerelease == 'false'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

      - name: Publish to Test PyPI
        if: needs.validate-release.outputs.is-prerelease == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          twine upload dist/*

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in files
        run: |
          # Update version in various files
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
          
          # Update version in setup files, documentation, etc.
          sed -i "s/version = .*/version = \"$VERSION_NUMBER\"/" pyproject.toml
          sed -i "s/__version__ = .*/__version__ = \"$VERSION_NUMBER\"/" src/__init__.py
          
          # Update README with latest version
          sed -i "s/Version: v[0-9.]*/Version: $VERSION/" README.md

      - name: Create version bump PR
        if: needs.validate-release.outputs.is-prerelease == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Create a new branch for version bump
            const version = "${{ needs.validate-release.outputs.version }}";
            const branchName = `post-release/${version}`;
            
            // Create PR for version updates
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-release updates for ${version}`,
              head: branchName,
              base: 'main',
              body: `Automated post-release updates for ${version}:
            
            - Updated version numbers in configuration files
            - Updated documentation references
            
            This PR was automatically created after the ${version} release.`,
              draft: false
            });

      - name: Update documentation site
        run: |
          # Update the documentation website with the new release
          python scripts/update-docs-site.py --version ${{ needs.validate-release.outputs.version }}

  # Notification
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-release]
    if: always()
    steps:
      - name: Notify team via Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🎉 New Release: Observer Coordinator Insights ${{ needs.validate-release.outputs.version }}",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ needs.validate-release.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Type",
                      "value": "${{ needs.validate-release.outputs.is-prerelease == 'true' && 'Pre-release' || 'Stable Release' }}",
                      "short": true
                    },
                    {
                      "title": "Container Image",
                      "value": "`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}`",
                      "short": false
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Release",
                      "url": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"
                    },
                    {
                      "type": "button",
                      "text": "Documentation",
                      "url": "https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/README.md"
                    }
                  ]
                }
              ]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send release announcement email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🎉 Observer Coordinator Insights ${{ needs.validate-release.outputs.version }} Released"
          body: |
            We're excited to announce the release of Observer Coordinator Insights ${{ needs.validate-release.outputs.version }}!
            
            ## What's New
            ${{ needs.validate-release.outputs.changelog }}
            
            ## Quick Start
            ```bash
            docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
            ```
            
            ## Documentation
            - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }})
            - [User Guide](https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/docs/user-guide/README.md)
            - [API Documentation](https://github.com/${{ github.repository }}/blob/${{ needs.validate-release.outputs.version }}/docs/user-guide/api-usage.md)
            
            Thank you for using Observer Coordinator Insights!
            
            The Observer Coordinator Insights Team
          to: ${{ secrets.ANNOUNCEMENT_EMAIL_LIST }}
          from: releases@observer-coordinator-insights.com