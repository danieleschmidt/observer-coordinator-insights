version: '3.8'

# Production Docker Compose configuration for Observer Coordinator Insights
# Optimized for high availability, security, and global deployment

networks:
  observer-coordinator-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  database-network:
    driver: bridge
    internal: true
  cache-network:
    driver: bridge
    internal: true

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/postgres
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/redis
  application-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/logs
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/grafana

services:
  # ================================
  # Database Services
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: observer-coordinator-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: observer_coordinator
      POSTGRES_USER: ${DATABASE_USER:-observer_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./deployment/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - database-network
    ports:
      - "127.0.0.1:5432:5432"
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-observer_user} -d observer_coordinator"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ================================
  # Cache Services
  # ================================
  redis:
    image: redis:7-alpine
    container_name: observer-coordinator-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - cache-network
    ports:
      - "127.0.0.1:6379:6379"
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ================================
  # Application Services
  # ================================
  api:
    image: terragon/observer-coordinator-insights:${VERSION:-latest}
    container_name: observer-coordinator-api
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      PORT: 8000
      WORKERS: 4
      TIMEOUT: 120
      PYTHONPATH: /app/src
      DATABASE_URL: postgresql://${DATABASE_USER:-observer_user}:${DATABASE_PASSWORD}@postgres:5432/observer_coordinator
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    volumes:
      - application-logs:/app/logs
      - ./config/production:/app/config:ro
    networks:
      - observer-coordinator-network
      - database-network
      - cache-network
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["api"]
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  worker:
    image: terragon/observer-coordinator-insights:${VERSION:-latest}
    container_name: observer-coordinator-worker
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      WORKER_TYPE: enhancement
      PYTHONPATH: /app/src
      DATABASE_URL: postgresql://${DATABASE_USER:-observer_user}:${DATABASE_PASSWORD}@postgres:5432/observer_coordinator
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - application-logs:/app/logs
      - ./config/production:/app/config:ro
    networks:
      - observer-coordinator-network
      - database-network
      - cache-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["worker"]
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 5

  scheduler:
    image: terragon/observer-coordinator-insights:${VERSION:-latest}
    container_name: observer-coordinator-scheduler
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      SCHEDULER_TYPE: value_discovery
      PYTHONPATH: /app/src
      DATABASE_URL: postgresql://${DATABASE_USER:-observer_user}:${DATABASE_PASSWORD}@postgres:5432/observer_coordinator
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - application-logs:/app/logs
      - ./config/production:/app/config:ro
    networks:
      - observer-coordinator-network
      - database-network
      - cache-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["scheduler"]
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 3

  # ================================
  # Reverse Proxy & Load Balancer
  # ================================
  nginx:
    image: nginx:1.25-alpine
    container_name: observer-coordinator-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - application-logs:/var/log/nginx
    networks:
      - observer-coordinator-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ================================
  # Monitoring Services
  # ================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: observer-coordinator-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - observer-coordinator-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:10.1.0
    container_name: observer-coordinator-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - observer-coordinator-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # Log Aggregation
  # ================================
  loki:
    image: grafana/loki:2.9.0
    container_name: observer-coordinator-loki
    restart: unless-stopped
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - ./volumes/loki:/loki
    networks:
      - observer-coordinator-network
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  promtail:
    image: grafana/promtail:2.9.0
    container_name: observer-coordinator-promtail
    restart: unless-stopped
    volumes:
      - application-logs:/var/log/app:ro
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    networks:
      - observer-coordinator-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M

  # ================================
  # Security & Compliance
  # ================================
  vault:
    image: vault:1.14
    container_name: observer-coordinator-vault
    restart: unless-stopped
    ports:
      - "127.0.0.1:8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_DISABLE_MLOCK: true
    volumes:
      - ./deployment/vault/config:/vault/config:ro
      - ./volumes/vault:/vault/data
    networks:
      - observer-coordinator-network
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ================================
  # Backup Service
  # ================================
  backup:
    image: postgres:15-alpine
    container_name: observer-coordinator-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./volumes/backups:/backups
      - ./deployment/backup/backup.sh:/backup.sh:ro
    networks:
      - database-network
    depends_on:
      - postgres
    command: ["sh", "-c", "while true; do sleep 86400; done"]
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

# ================================
# Production Deployment Configuration
# ================================
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Apply logging configuration to all services
x-common-variables: &common-variables
  logging: *default-logging