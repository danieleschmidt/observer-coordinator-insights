apiVersion: apps/v1
kind: Deployment
metadata:
  name: observer-coordinator-api
  namespace: observer-coordinator-insights
  labels:
    app.kubernetes.io/name: observer-coordinator-insights
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "v4.0.0"
    app.kubernetes.io/instance: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: observer-coordinator-insights
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: observer-coordinator-insights
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "v4.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: observer-coordinator-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: api
        image: terragon/observer-coordinator-insights:v4.0.0
        imagePullPolicy: IfNotPresent
        command: ["/app/entrypoint.sh"]
        args: ["api"]
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PORT
          value: "8000"
        - name: WORKERS
          value: "4"
        - name: TIMEOUT
          value: "120"
        - name: PYTHONPATH
          value: "/app/src"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: secret-key
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: encryption-key
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi
            ephemeral-storage: 5Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-config
        configMap:
          name: observer-coordinator-config
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - observer-coordinator-insights
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      terminationGracePeriodSeconds: 30

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: observer-coordinator-worker
  namespace: observer-coordinator-insights
  labels:
    app.kubernetes.io/name: observer-coordinator-insights
    app.kubernetes.io/component: worker
    app.kubernetes.io/version: "v4.0.0"
    app.kubernetes.io/instance: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: observer-coordinator-insights
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: observer-coordinator-insights
        app.kubernetes.io/component: worker
        app.kubernetes.io/version: "v4.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: observer-coordinator-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: worker
        image: terragon/observer-coordinator-insights:v4.0.0
        imagePullPolicy: IfNotPresent
        command: ["/app/entrypoint.sh"]
        args: ["worker"]
        ports:
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: WORKER_TYPE
          value: "enhancement"
        - name: PYTHONPATH
          value: "/app/src"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: redis-url
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
            ephemeral-storage: 1Gi
          limits:
            cpu: 1000m
            memory: 1Gi
            ephemeral-storage: 3Gi
        livenessProbe:
          exec:
            command:
            - python
            - /app/healthcheck.py
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-config
        configMap:
          name: observer-coordinator-config
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: data
        emptyDir:
          sizeLimit: 2Gi
      - name: tmp
        emptyDir:
          sizeLimit: 500Mi
      terminationGracePeriodSeconds: 60

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: observer-coordinator-scheduler
  namespace: observer-coordinator-insights
  labels:
    app.kubernetes.io/name: observer-coordinator-insights
    app.kubernetes.io/component: scheduler
    app.kubernetes.io/version: "v4.0.0"
    app.kubernetes.io/instance: production
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: observer-coordinator-insights
      app.kubernetes.io/component: scheduler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: observer-coordinator-insights
        app.kubernetes.io/component: scheduler
        app.kubernetes.io/version: "v4.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: observer-coordinator-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: scheduler
        image: terragon/observer-coordinator-insights:v4.0.0
        imagePullPolicy: IfNotPresent
        command: ["/app/entrypoint.sh"]
        args: ["scheduler"]
        ports:
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: SCHEDULER_TYPE
          value: "value_discovery"
        - name: PYTHONPATH
          value: "/app/src"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: observer-coordinator-secrets
              key: redis-url
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 500Mi
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 2Gi
        livenessProbe:
          exec:
            command:
            - python
            - /app/healthcheck.py
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-config
        configMap:
          name: observer-coordinator-config
      - name: logs
        emptyDir:
          sizeLimit: 500Mi
      - name: data
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir:
          sizeLimit: 250Mi
      terminationGracePeriodSeconds: 30

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy
  namespace: observer-coordinator-insights
  labels:
    app.kubernetes.io/name: observer-coordinator-insights
    app.kubernetes.io/component: proxy
    app.kubernetes.io/version: "v4.0.0"
    app.kubernetes.io/instance: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: observer-coordinator-insights
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: observer-coordinator-insights
        app.kubernetes.io/component: proxy
        app.kubernetes.io/version: "v4.0.0"
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-logs
          mountPath: /var/log/nginx
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-logs
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      terminationGracePeriodSeconds: 30